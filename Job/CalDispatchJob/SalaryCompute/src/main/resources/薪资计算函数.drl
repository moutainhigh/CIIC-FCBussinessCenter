package com.ciicsh.payroll.common

import com.ciicsh.caldispatchjob.entity.DroolsContext;
import com.ciicsh.caldispatchjob.entity.EmpPayItem;
import com.ciicsh.caldispatchjob.entity.FuncEntity;
import com.ciicsh.caldispatchjob.entity.TaxEntity;
import java.math.BigDecimal;
import java.util.List;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import org.apache.commons.lang3.StringUtils;
import java.time.Period;
import java.util.Calendar;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters
import java.util.ArrayList
import java.util.Optional
import java.math.RoundingMode;

//2011前个税
function List<TaxEntity> getTaxList() { // 个税表

    List<TaxEntity> taxList = new ArrayList<TaxEntity>();

    TaxEntity tax0 = new TaxEntity();
    tax0.setTaxDueStart(0.0000); //应纳税额起点
    tax0.setTaxDueEnd(500.0000); //应纳终点起点
    tax0.setTaxRate(0.0500);      // 税率
    tax0.setDeductions(0.0000);  // 速算扣除数
    tax0.setTaxStart(0.0000);    // 税额起点
    tax0.setTaxEnd(25.0000);      // 税额终点
    tax0.setAfterTaxStart(0.0000); // 税后工资起点
    tax0.setAfterTaxEnd(475.0000); // 税后工资终点
    taxList.add(tax0);

    TaxEntity tax1 = new TaxEntity();
    tax1.setTaxDueStart(500.0000);
    tax1.setTaxDueEnd(2000.0000);
    tax1.setTaxRate(0.1000);
    tax1.setDeductions(25.0000);
    tax1.setTaxStart(25.0000);
    tax1.setTaxEnd(175.0000);
    tax1.setAfterTaxStart(475.0000);
    tax1.setAfterTaxEnd(1825.0000);
    taxList.add(tax1);

    TaxEntity tax2 = new TaxEntity();
    tax2.setTaxDueStart(2000.0000);
    tax2.setTaxDueEnd(5000.0000);
    tax2.setTaxRate(0.2000);
    tax2.setDeductions(555.0000);
    tax2.setTaxStart(345.0000);
    tax2.setTaxEnd(1245.0000);
    tax2.setAfterTaxStart(4155.0000);
    tax2.setAfterTaxEnd(7755.0000);
    taxList.add(tax2);

    TaxEntity tax3 = new TaxEntity();
    tax3.setTaxDueStart(9000.0000);
    tax3.setTaxDueEnd(35000.0000);
    tax3.setTaxRate(0.2500);
    tax3.setDeductions(1005.0000);
    tax3.setTaxStart(1245.0000);
    tax3.setTaxEnd(7745.0000);
    tax3.setAfterTaxStart(7755.0000);
    tax3.setAfterTaxEnd(27255.0000);
    taxList.add(tax3);

    TaxEntity tax4 = new TaxEntity();
    tax4.setTaxDueStart(35000.0000);
    tax4.setTaxDueEnd(55000.0000);
    tax4.setTaxRate(0.3000);
    tax4.setDeductions(2755.0000);
    tax4.setTaxStart(7745.0000);
    tax4.setTaxEnd(13745.0000);
    tax4.setAfterTaxStart(27255.0000);
    tax4.setAfterTaxEnd(41255.0000);
    taxList.add(tax4);

    TaxEntity tax5 = new TaxEntity();
    tax5.setTaxDueStart(55000.0000);
    tax5.setTaxDueEnd(80000.0000);
    tax5.setTaxRate(0.3500);
    tax5.setDeductions(5505.0000);
    tax5.setTaxStart(13745.0000);
    tax5.setTaxEnd(22495.0000);
    tax5.setAfterTaxStart(41255.0000);
    tax5.setAfterTaxEnd(57505.0000);
    taxList.add(tax5);

    TaxEntity tax6 = new TaxEntity();
    tax6.setTaxDueStart(80000.0000);
    tax6.setTaxDueEnd(10000000000.0000);
    tax6.setTaxRate(0.4500);
    tax6.setDeductions(13505.0000);
    tax6.setTaxStart(22495.0000);
    tax6.setTaxEnd(1000000000.0000);
    tax6.setAfterTaxStart(57505.0000);
    tax6.setAfterTaxEnd(1000000000.0000);
    taxList.add(tax6);

	return taxList;
}

//2011后个税
function List<TaxEntity> getTaxList_2011() { // 个税表

    List<TaxEntity> taxList = new ArrayList<TaxEntity>();

    TaxEntity tax0 = new TaxEntity();
    tax0.setTaxDueStart(0.0000); //应纳税额起点
    tax0.setTaxDueEnd(1500.0000); //应纳终点起点
    tax0.setTaxRate(0.0300);      // 税率
    tax0.setDeductions(0.0000);  // 速算扣除数
    tax0.setTaxStart(0.0000);    // 税额起点
    tax0.setTaxEnd(45.0000);      // 税额终点
    tax0.setAfterTaxStart(0.0000); // 税后工资起点
    tax0.setAfterTaxEnd(1455.0000); // 税后工资终点
    taxList.add(tax0);

    TaxEntity tax1 = new TaxEntity();
    tax1.setTaxDueStart(1500.0000);
    tax1.setTaxDueEnd(4500.0000);
    tax1.setTaxRate(0.1000);
    tax1.setDeductions(105.0000);
    tax1.setTaxStart(45.0000);
    tax1.setTaxEnd(345.0000);
    tax1.setAfterTaxStart(1455.0000);
    tax1.setAfterTaxEnd(4155.0000);
    taxList.add(tax1);

    TaxEntity tax2 = new TaxEntity();
    tax2.setTaxDueStart(4500.0000);
    tax2.setTaxDueEnd(9000.0000);
    tax2.setTaxRate(0.2000);
    tax2.setDeductions(555.0000);
    tax2.setTaxStart(345.0000);
    tax2.setTaxEnd(1245.0000);
    tax2.setAfterTaxStart(4155.0000);
    tax2.setAfterTaxEnd(7755.0000);
    taxList.add(tax2);

    TaxEntity tax3 = new TaxEntity();
    tax3.setTaxDueStart(9000.0000);
    tax3.setTaxDueEnd(35000.0000);
    tax3.setTaxRate(0.2500);
    tax3.setDeductions(1005.0000);
    tax3.setTaxStart(1245.0000);
    tax3.setTaxEnd(7745.0000);
    tax3.setAfterTaxStart(7755.0000);
    tax3.setAfterTaxEnd(27255.0000);
    taxList.add(tax3);

    TaxEntity tax4 = new TaxEntity();
    tax4.setTaxDueStart(35000.0000);
    tax4.setTaxDueEnd(55000.0000);
    tax4.setTaxRate(0.3000);
    tax4.setDeductions(2755.0000);
    tax4.setTaxStart(7745.0000);
    tax4.setTaxEnd(13745.0000);
    tax4.setAfterTaxStart(27255.0000);
    tax4.setAfterTaxEnd(41255.0000);
    taxList.add(tax4);

    TaxEntity tax5 = new TaxEntity();
    tax5.setTaxDueStart(55000.0000);
    tax5.setTaxDueEnd(80000.0000);
    tax5.setTaxRate(0.3500);
    tax5.setDeductions(5505.0000);
    tax5.setTaxStart(13745.0000);
    tax5.setTaxEnd(22495.0000);
    tax5.setAfterTaxStart(41255.0000);
    tax5.setAfterTaxEnd(57505.0000);
    taxList.add(tax5);

    TaxEntity tax6 = new TaxEntity();
    tax6.setTaxDueStart(80000.0000);
    tax6.setTaxDueEnd(10000000000.0000);
    tax6.setTaxRate(0.4500);
    tax6.setDeductions(13505.0000);
    tax6.setTaxStart(22495.0000);
    tax6.setTaxEnd(1000000000.0000);
    tax6.setAfterTaxStart(57505.0000);
    tax6.setAfterTaxEnd(1000000000.0000);
    taxList.add(tax6);

	return taxList;
}

// 劳务税表
function List<TaxEntity> getServiceTaxList() {

    List<TaxEntity> taxList = new ArrayList<>();

    TaxEntity taxEntity = new TaxEntity();
    taxEntity.setTaxDueStart(0.0000);        // 应纳税额起点
    taxEntity.setTaxDueEnd(800.0000);        // 应纳终点起点
    taxEntity.setTaxRate(0.0000);            // 税率
    taxEntity.setDeductions(0.0000);         // 速算扣除数
    taxEntity.setTaxStart(0.0000);           // 税额起点
    taxEntity.setTaxEnd(0.0000);             // 税额终点
    taxEntity.setAfterTaxStart(0.0000);      // 税后工资起点
    taxEntity.setAfterTaxEnd(800.0000);      // 税后工资终点
    taxList.add(taxEntity);

    taxEntity = new TaxEntity();
    taxEntity.setTaxDueStart(800.0000);      // 应纳税额起点
    taxEntity.setTaxDueEnd(4000.0000);       // 应纳终点起点
    taxEntity.setTaxRate(0.2000);            // 税率
    taxEntity.setDeductions(0.0000);         // 速算扣除数
    taxEntity.setTaxStart(0.0000);           // 税额起点
    taxEntity.setTaxEnd(640.0000);           // 税额终点
    taxEntity.setAfterTaxStart(800.0000);    // 税后工资起点
    taxEntity.setAfterTaxEnd(3360.0000);     // 税后工资终点
    taxList.add(taxEntity);

    taxEntity = new TaxEntity();
    taxEntity.setTaxDueStart(4000.0000);     // 应纳税额起点
    taxEntity.setTaxDueEnd(25000.0000);      // 应纳终点起点
    taxEntity.setTaxRate(0.2000);            // 税率
    taxEntity.setDeductions(0.0000);         // 速算扣除数
    taxEntity.setTaxStart(640.0000);         // 税额起点
    taxEntity.setTaxEnd(4000.0000);          // 税额终点
    taxEntity.setAfterTaxStart(3360.0000);   // 税后工资起点
    taxEntity.setAfterTaxEnd(21000.0000);    // 税后工资终点
    taxList.add(taxEntity);

    taxEntity = new TaxEntity();
    taxEntity.setTaxDueStart(25000.0000);    // 应纳税额起点
    taxEntity.setTaxDueEnd(62500.0000);      // 应纳终点起点
    taxEntity.setTaxRate(0.3000);            // 税率
    taxEntity.setDeductions(2000.0000);      // 速算扣除数
    taxEntity.setTaxStart(4000.0000);        // 税额起点
    taxEntity.setTaxEnd(13000.0000);         // 税额终点
    taxEntity.setAfterTaxStart(21000.0000);  // 税后工资起点
    taxEntity.setAfterTaxEnd(49500.0000);    // 税后工资终点
    taxList.add(taxEntity);

    taxEntity = new TaxEntity();
    taxEntity.setTaxDueStart(62500.0000);    // 应纳税额起点
    taxEntity.setTaxDueEnd(1000000000.0000); // 应纳终点起点
    taxEntity.setTaxRate(0.4000);            // 税率
    taxEntity.setDeductions(7000.0000);      // 速算扣除数
    taxEntity.setTaxStart(13000.0000);       // 税额起点
    taxEntity.setTaxEnd(1000000.0000);       // 税额终点
    taxEntity.setAfterTaxStart(49500.0000);  // 税后工资起点
    taxEntity.setAfterTaxEnd(1000000.0000);  // 税后工资终点
    taxList.add(taxEntity);

	return taxList;
}


rule "最低工资标准" // {最低工资标准([城市])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("最低工资标准");
        String para1 = func.getParameters().get(0);
        String city = String.valueOf($context.getItemValByCode(para1));

        if("扬州".equals(city)){
            func.setResult(new BigDecimal("1890.00"));
        }else if("天津".equals(city)){
            func.setResult(new BigDecimal("2050.00"));
        }else if("武汉".equals(city)){
            func.setResult(new BigDecimal("1750.00"));
        }else if("北京".equals(city)){
            func.setResult(new BigDecimal("2000.00"));
        }else if("沈阳".equals(city)){
            func.setResult(new BigDecimal("1530.00"));
        }else if("西安".equals(city)){
            func.setResult(new BigDecimal("1680.00"));
        }else if("成都".equals(city)){
            func.setResult(new BigDecimal("1500.00"));
        }else if("广州".equals(city)){
            func.setResult(new BigDecimal("1895.00"));
        }else if("济南".equals(city)){
            func.setResult(new BigDecimal("1810.00"));
        }else if("上海".equals(city)){
            func.setResult(new BigDecimal("2300.00"));
        }else{
            func.setResult(BigDecimal.ZERO);
        }
end

rule "连续工龄" // {连续工龄([首次参加工作日期],[离职日期])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("连续工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        // 首次参加工作日期
        String firstWorkingDate = String.valueOf($context.getItemValByCode(para1));
        // 离职日期
        String leaveDate = String.valueOf($context.getItemValByCode(para2));

        LocalDate beginDate = LocalDate.parse(firstWorkingDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate endDate = LocalDate.parse(leaveDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        // 得到工龄
        int years = 0;
        // 得到年差
        years = endDate.getYear() - beginDate.getYear();
        // 若离职月数小于首次开始参加工作时间的月数，年差-1
        if (endDate.getMonthValue() < beginDate.getMonthValue()) {
            years = years - 1;
        } else if (endDate.getMonthValue() == beginDate.getMonthValue()) {
            // 当月数相等时，判断日数，若离职月的日数小于首次开始参加工作时间的日数，年差-1
            if (endDate.getDayOfMonth() < beginDate.getDayOfMonth()) {
                years = years - 1;
            }
        }
        func.setResult(new BigDecimal(String.valueOf(years)));
end

rule "工龄" // {工龄([入职日期],[离职日期])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        // 入职日期
        String onboardDate = String.valueOf($context.getItemValByCode(para1));
        // 离职日期
        String leaveDate = String.valueOf($context.getItemValByCode(para2));

        LocalDate beginDate = LocalDate.parse(onboardDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate endDate = LocalDate.parse(leaveDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
         // 得到工龄
        int years = 0;
        // 得到年差
        years = endDate.getYear() - beginDate.getYear();
        // 若离职月数少于入职月数，年差-1
        if (endDate.getMonthValue() < beginDate.getMonthValue()) {
            years = years - 1;
        } else if (endDate.getMonthValue() == beginDate.getMonthValue()) {
            // 当月数相等时，判断日数，若离职月的日数小于入职月的日数，年差-1
            if (endDate.getDayOfMonth() < beginDate.getDayOfMonth()) {
                years = years - 1;
            }
        }
        func.setResult(new BigDecimal(String.valueOf(years)));

end

rule "劳务税" // {劳务税([劳务费])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("劳务税");
        BigDecimal salaryBigDecimal = new BigDecimal(func.getParameters().get(0));

        // 劳务税表
        List<TaxEntity> taxList = null;
        // 计算结果
        BigDecimal resultBigDecimal = null;

        if (salaryBigDecimal.compareTo(new BigDecimal(4000)) >= 0) {
            taxList = getServiceTaxList(); //获取劳务税表

            if (taxList != null) {
                // 应纳税额起点 < @moneynum and 应纳税额终点 >= @moneynum
                TaxEntity taxEntity = taxList.stream().filter(
                        entity -> new BigDecimal(entity.getTaxDueStart()).compareTo(salaryBigDecimal) < 0 &&
                                  new BigDecimal(entity.getTaxDueEnd()).compareTo(salaryBigDecimal) >= 0
                ).findFirst().orElse(null);

                if (taxEntity != null) {
                    // (@moneynum * 0.8) * 税率 - 速算扣除数
                    resultBigDecimal = salaryBigDecimal.multiply(new BigDecimal(0.8))
                                                       .multiply(new BigDecimal(taxEntity.getTaxRate()))
                                                       .subtract(new BigDecimal(taxEntity.getDeductions()))
                                                       .setScale(2, 4);

                    func.setResult(resultBigDecimal);
                }
            }
        } else {
            if (salaryBigDecimal.compareTo(new BigDecimal(800)) > 0) {
                // (@moneynum - 800) * 0.2
                resultBigDecimal = salaryBigDecimal.subtract(new BigDecimal(800))
                                                   .multiply(new BigDecimal(0.2))
                                                   .setScale(2, 4);

                func.setResult(resultBigDecimal);
            } else {
                func.setResult(new BigDecimal(0.00));
            }
        }
end

rule "病假扣除比例" // {病假扣除比例([城市],[工龄],[连续工龄],[病假天数],[当年度累计病假天数],[病假基数],[最低工资标准])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("病假扣除比例");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String para3 = func.getParameters().get(2);
        String para4 = func.getParameters().get(3);
        String para5 = func.getParameters().get(4);
        String para6 = func.getParameters().get(5);
        String para7 = func.getParameters().get(6);

        String city = String.valueOf($context.getItemValByCode(para1)); // 城市
        Double workingAge = Double.parseDouble(String.valueOf($context.getItemValByCode(para2))); // 工龄
        Double continueAge = Double.parseDouble(String.valueOf($context.getItemValByCode(para3))); // 连续工龄
        Double sickDays = Double.parseDouble(String.valueOf($context.getItemValByCode(para4))); // 病假天数
        Double AnnualSickDays = Double.parseDouble(String.valueOf($context.getItemValByCode(para5))); // 当年度累计病假天数
        Double sickBase = Double.parseDouble(String.valueOf($context.getItemValByCode(para6))); // 病假基数
        Double minStandard = Double.parseDouble(String.valueOf($context.getItemValByCode(para7))); // 最低工资标准

        if(("扬州".equals(city) || "上海".equals(city)) && workingAge < 2){
            func.setResult(new BigDecimal("0.4"));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge >= 2 && workingAge < 4){
            func.setResult(new BigDecimal("0.3"));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge >= 4 && workingAge < 6){
            func.setResult(new BigDecimal("0.2"));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge >= 6 && workingAge < 8){
            func.setResult(new BigDecimal("0.1"));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge >= 8){
            func.setResult(BigDecimal.ZERO);
        }else if(("成都".equals(city)) && continueAge < 10){
            func.setResult(new BigDecimal("0.3"));
        }else if(("成都".equals(city)) && continueAge >= 10 && continueAge < 20){
            func.setResult(new BigDecimal("0.2"));
        }else if(("成都".equals(city)) && continueAge >= 20 && continueAge < 30){
            func.setResult(new BigDecimal("0.1"));
        }else if(("成都".equals(city)) && continueAge >= 30){
             func.setResult(new BigDecimal("0.05"));
        }else if("北京".equals(city) || "天津".equals(city) || "沈阳".equals(city) || "广州".equals(city) || "武汉".equals(city)){
             func.setResult(new BigDecimal("0.2"));
        }else if(("北京".equals(city) || "天津".equals(city) || "沈阳".equals(city) || "广州".equals(city) || "武汉".equals(city))
                    && AnnualSickDays<=30 && (sickBase/21.75*sickDays*0.7 > minStandard/21.75*sickDays*0.8)){
              func.setResult(new BigDecimal("0.3"));
        }else if("西安".equals(city) || "济南".equals(city)){
              func.setResult(new BigDecimal("0.3"));
         }
        else{
            func.setResult(BigDecimal.ZERO);
        }
end

rule "长病假扣除比例" // {长病假扣除比例([城市],[工龄],[连续工龄]}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("长病假扣除比例");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String para3 = func.getParameters().get(2);

        String city = (String)$context.getItemValByCode(para1); // 城市
        Double workingAge = Double.parseDouble(String.valueOf($context.getItemValByCode(para2))); // 工龄
        Double continueAge = Double.parseDouble(String.valueOf($context.getItemValByCode(para3))); // 连续工龄

        if((city.equals("扬州") || city.equals("上海")) && workingAge < 1){
            func.setResult(new BigDecimal("0.6"));
        }else if((city.equals("扬州") || city.equals("上海")) && workingAge >= 1 && workingAge < 3){
            func.setResult(new BigDecimal("0.5"));
        }else if((city.equals("扬州") || city.equals("上海")) && workingAge >= 3){
            func.setResult(new BigDecimal("0.4"));
        }else if((city.equals("成都")) && continueAge < 10){
             func.setResult(new BigDecimal("0.4"));
        }else if((city.equals("成都")) && continueAge >= 10 && continueAge < 20){
             func.setResult(new BigDecimal("0.35"));
        }else if((city.equals("成都")) && continueAge >= 30){
              func.setResult(new BigDecimal("0.3"));
        }else if(city.equals("北京") || city.equals("天津") || city.equals("沈阳") || city.equals("广州") || city.equals("武汉")){
              func.setResult(new BigDecimal("0.2"));
        }else if(city.equals("济南")){
               func.setResult(new BigDecimal("0.4"));
        }else if(city.equals("西安")){
               func.setResult(new BigDecimal("0.2"));
        }
        else{
            func.setResult(BigDecimal.ZERO);
        }
end

/**
 * 标准薪资组,薪资项17
 *
*/
rule "实际工龄" // {实际工龄([入职日期],[离职日期])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("实际工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String dateOnBoard = String.valueOf($context.getItemValByCode(para1)); // 入职日期
        String leaveDate = String.valueOf($context.getItemValByCode(para2)); // 离职日期

        LocalDate localDateBegin = LocalDate.parse(dateOnBoard);
        LocalDate localDateEnd = LocalDate.now();
        // 离职日期不为空，天数差=离职-入职
        if (StringUtils.isNotBlank(leaveDate)) {
            localDateEnd = LocalDate.parse(leaveDate);
        } else {
            // 离职日期为空，天数差=计薪月最后一天-入职
            String period = $context.getBatchContext().getPeriod();
            StringBuilder builder = new StringBuilder();
            period = builder.append(period.substring(0, 4)).append("-").append(period.substring(4)).append("-01").toString();
            // 计薪月第一天,格式为yyyy-MM-01
            LocalDate periodBegin = LocalDate.parse(period);
            // 计薪月最后一天,格式为yyyy-MM-dd
            localDateEnd = periodBegin.with(TemporalAdjusters.lastDayOfMonth());
        }
        // 得到入职和离职(或者是计薪月最后一天)的天数差
        long days = ChronoUnit.DAYS.between(localDateBegin, localDateEnd);
        // 工作年限
        BigDecimal workYears = new BigDecimal(days).divide(new BigDecimal(365), 6, BigDecimal.ROUND_HALF_UP);

        func.setResult(workYears);
end

/**
** 标准薪资组,薪资项18
*/
rule "工龄折算率" // {工龄折算率([工作年限_连续工龄])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("工龄折算率");
        String para1 = func.getParameters().get(0);
        Double successiveService = Double.parseDouble(String.valueOf($context.getItemValByCode(para1))); // 工作年限_连续工龄
        if (successiveService > 0 && successiveService < 2) {
            func.setResult(new BigDecimal("0.4"));
        } else if (successiveService >= 2 && successiveService < 4) {
            func.setResult(new BigDecimal("0.3"));
        } else if (successiveService >= 4 && successiveService < 6) {
            func.setResult(new BigDecimal("0.2"));
        } else if (successiveService >= 6 && successiveService < 8) {
            func.setResult(new BigDecimal("0.1"));
        } else {
            func.setResult(BigDecimal.ZERO);
        }
end

/**
** 标准薪资组,薪资项19
*/
rule "长病假工龄折算率" // {长病假工龄折算率([工作年限_连续工龄])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("长病假工龄折算率");
        String para1 = func.getParameters().get(0);
        Double successiveService = Double.parseDouble(String.valueOf($context.getItemValByCode(para1))); // 工作年限_连续工龄
        if (successiveService > 0 && successiveService < 2) {
            func.setResult(new BigDecimal("0.4"));
        } else if (successiveService >= 2 && successiveService < 4) {
            func.setResult(new BigDecimal("0.3"));
        } else if (successiveService >= 4 && successiveService < 6) {
            func.setResult(new BigDecimal("0.2"));
        } else if (successiveService >= 6 && successiveService < 8) {
            func.setResult(new BigDecimal("0.1"));
        } else {
            func.setResult(BigDecimal.ZERO);
        }
end

/**
 ** 标准薪资组
*/
rule "免抵额" // {免抵额([国籍])}
              // 3500或者4800
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("免抵额");
        String para1 = func.getParameters().get(0);
        // 去除前后空格
        String nation = String.valueOf($context.getItemValByCode(para1)).trim();

        if(nation.equals("中华人民共和国") || nation.equals("中国")) {
            func.setResult(new BigDecimal("3500.00"));
        } else {
            func.setResult(new BigDecimal("4800.00"));
        }
end

/**
** 一般个人所得税
*/
rule "一般个人所得税" // {一般个人所得税([flag],[应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("一般个人所得税");
        String flag = func.getParameters().get(0);
        String para1 = func.getParameters().get(1);
        Double par1 = Double.parseDouble(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额
        String falgVal = $context.getItemValByCode(flag) == null ? flag : String.valueOf($context.getItemValByCode(flag));

        double taxRate, deductions = 0.0;
        List<TaxEntity> taxList = null;

        if(par1 > 0){

            if(falgVal.equals("0")){
                taxList = getTaxList(); // 0 表示 2011年以前的个税表

            }else if(falgVal.equals("1")){  // 1 表示 2011年以后的个税表
                taxList = getTaxList_2011();
            }
            if(taxList != null){
                TaxEntity find = null;
                for (TaxEntity tax : taxList) {
                    if(tax.getTaxDueStart() < par1 && tax.getTaxDueEnd() >= par1){
                        find = tax;
                        break;
                    }
                }
                if(find != null){
                    taxRate = find.getTaxRate();
                    System.out.print(taxRate);
                    deductions = find.getDeductions();
                    System.out.print(deductions);
                    BigDecimal result = new BigDecimal(par1 * taxRate - deductions);
                    System.out.print(result);

                    func.setResult(result);
                }
            }

        }else{
            func.setResult(BigDecimal.ZERO);
        }
end

/**
 * 标准薪资组
 * >0&&<=0.5 0.5
 * >0.5&&<=1 1.0
 * >1&&<=1.5 1.5
 * >11.5&&<=12 12.0
 * >12&&<=12.5 12.5
 */
rule "实际工作年限数" // 离职日期－入职日期 是0.5档 （离职日期为空，按工作日历）
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("实际工作年限数");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String dateOnBoard = String.valueOf($context.getItemValByCode(para1)); // 入职日期
        String leaveDate = String.valueOf($context.getItemValByCode(para2)); // 离职日期
        LocalDate localDateBegin = LocalDate.parse(dateOnBoard);
        LocalDate localDateEnd = LocalDate.now();
        // 离职日期不为空，天数差=离职-入职
        if (StringUtils.isNotBlank(leaveDate)) {
            localDateEnd = LocalDate.parse(leaveDate);
        } else {
            // 离职日期为空，天数差=计薪月最后一天-入职
             String period = $context.getBatchContext().getPeriod();
            StringBuilder builder = new StringBuilder();
            period = builder.append(period.substring(0, 4)).append("-").append(period.substring(4)).append("-01").toString();
            // 计薪月第一天,格式为yyyy-MM-01
            LocalDate periodBegin = LocalDate.parse(period);
            // 计薪月最后一天,格式为yyyy-MM-dd
            localDateEnd = periodBegin.with(TemporalAdjusters.lastDayOfMonth());
        }
        // 得到入职和离职(或者是计薪月最后一天)的天数差
        long days = ChronoUnit.DAYS.between(localDateBegin, localDateEnd);
        BigDecimal workYears = new BigDecimal(days).divide(new BigDecimal(365), 1, BigDecimal.ROUND_HALF_UP);

        String yearLimit = String.valueOf(workYears);
        int yearFirst = Integer.valueOf(yearLimit.substring(0, yearLimit.indexOf(".")));
        int yearLast = Integer.valueOf(yearLimit.substring(yearLimit.length() - 1));
        switch (yearLast) {
            case 0:
            case 5:
                yearFirst = yearFirst;
                yearLast = yearLast;
                break;
            case 1:
            case 2:
            case 3:
            case 4:
                yearFirst = yearFirst;
                yearLast = 5;
                break;
            case 6:
            case 7:
            case 8:
            case 9:
                yearFirst = yearFirst + 1;
                yearLast = 0;
                break;
            default:
                break;
        }
        yearLimit = String.valueOf(yearFirst) + "." + String.valueOf(yearLast);
        func.setResult(new BigDecimal(yearLimit));
end

/**
** 标准薪资组
*/
rule "本月日历天数" // {本月日历天数()}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("本月日历天数");
        // period格式为yyyy-MM
        String period = $context.getBatchContext().getPeriod();
        StringBuilder builder = new StringBuilder();
        period = builder.append(period.substring(0, 4)).append("-").append(period.substring(4)).append("-01").toString();
        LocalDate localDate = LocalDate.parse(period);

        func.setResult(new BigDecimal(localDate.lengthOfMonth()));
end

/**
** 标准薪资组
** 不考虑节假日
*/
rule "本月计薪天数" // {本月计薪天数()}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("本月计薪天数");
        // period格式为yyyy-MM
        String period = $context.getBatchContext().getPeriod();

        int workDays = 0;
        Calendar cal = Calendar.getInstance();
        int year = Integer.valueOf(period.substring(0, 4));
        int month = Integer.valueOf(period.substring(4));
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month - 1); // 0表示1月
        cal.set(Calendar.DATE, 1); // 从每月1号开始

        while (cal.get(Calendar.YEAR) == year && cal.get(Calendar.MONTH) < month) {
            int day = cal.get(Calendar.DAY_OF_WEEK);

            if (!(day == Calendar.SUNDAY || day == Calendar.SATURDAY)) {
                workDays++;
            }
            cal.add(Calendar.DATE, 1);
        }

        func.setResult(new BigDecimal(workDays));
end

/**
** 标准薪资组,税率
*/
rule "税率" // {税率([flag],[应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("税率");
        String flag = func.getParameters().get(0);
        String para1 = func.getParameters().get(1);
        Double par1 = Double.parseDouble(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额
        String falgVal = $context.getItemValByCode(flag) == null ? flag : String.valueOf($context.getItemValByCode(flag));

        double taxRate = 0.0;
        List<TaxEntity> taxList = null;

        if(par1 > 0){

            if(falgVal.equals("0")){
                taxList = getTaxList(); // 0 表示 2011年以前的个税表

            }else if(falgVal.equals("1")){  // 1 表示 2011年以后的个税表
                taxList = getTaxList_2011();
            }
            if(taxList != null){
                TaxEntity find = null;
                for (TaxEntity tax : taxList) {
                    if(tax.getTaxDueStart() < par1 && tax.getTaxDueEnd() >= par1){
                        find = tax;
                        break;
                    }
                }
                if(find != null){
                    taxRate = find.getTaxRate();
                    System.out.print(taxRate);
                    BigDecimal result = new BigDecimal(taxRate);
                    func.setResult(result);
                }
            }

        }else{
            func.setResult(BigDecimal.ZERO);
        }
end

/**
** 标准薪资组,速扣数
*/
rule "速扣数" // {速扣数([flag],[应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("速扣数");
        String flag = func.getParameters().get(0);
        String para1 = func.getParameters().get(1);
        Double par1 = Double.parseDouble(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额
        String falgVal = $context.getItemValByCode(flag) == null ? flag : String.valueOf($context.getItemValByCode(flag));

        double deductions = 0.0;
        List<TaxEntity> taxList = null;

        if(par1 > 0){

            if(falgVal.equals("0")){
                taxList = getTaxList(); // 0 表示 2011年以前的个税表

            }else if(falgVal.equals("1")){  // 1 表示 2011年以后的个税表
                taxList = getTaxList_2011();
            }
            if(taxList != null){
                TaxEntity find = null;
                for (TaxEntity tax : taxList) {
                    if(tax.getTaxDueStart() < par1 && tax.getTaxDueEnd() >= par1){
                        find = tax;
                        break;
                    }
                }
                if(find != null){
                    deductions = find.getDeductions();
                    System.out.print(deductions);
                    BigDecimal result = new BigDecimal(deductions);
                    func.setResult(result);
                }
            }

        }else{
            func.setResult(BigDecimal.ZERO);
        }
end