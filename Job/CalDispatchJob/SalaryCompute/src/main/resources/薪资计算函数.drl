package com.ciicsh.payroll.common

import com.ciicsh.caldispatchjob.entity.DroolsContext;
import com.ciicsh.caldispatchjob.entity.EmpPayItem;
import com.ciicsh.caldispatchjob.entity.FuncEntity;
import java.math.BigDecimal;
import java.util.List
import java.time.LocalDate
import java.time.format.DateTimeFormatter;
import org.apache.commons.lang3.StringUtils

rule "最低工资标准" // {最低工资标准([城市])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("最低工资标准");
        String para1 = func.getParameters().get(0);
        String city = (String)$context.getItemValByCode(para1);

        if("扬州".equals(city)){
            func.setResult(new BigDecimal("1890.00"));
        }else if("天津".equals(city)){
            func.setResult(new BigDecimal("2050.00"));
        }else if("武汉".equals(city)){
            func.setResult(new BigDecimal("1750.00"));
        }else if("北京".equals(city)){
            func.setResult(new BigDecimal("2000.00"));
        }else if("沈阳".equals(city)){
            func.setResult(new BigDecimal("1530.00"));
        }else if("西安".equals(city)){
            func.setResult(new BigDecimal("1680.00"));
        }else if("成都".equals(city)){
            func.setResult(new BigDecimal("1500.00"));
        }else if("广州".equals(city)){
            func.setResult(new BigDecimal("1895.00"));
        }else if("济南".equals(city)){
            func.setResult(new BigDecimal("1810.00"));
        }else if("上海".equals(city)){
            func.setResult(new BigDecimal("2300.00"));
        }else{
            func.setResult(new BigDecimal("0.00"));
        }
end

rule "连续工龄" // {连续工龄([首次参加工作日期],[离职日期])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("连续工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        // 首次参加工作日期
        String firstWorkingDate = (String)$context.getItemValByCode(para1);
        // 离职日期
        String leaveDate = (String)$context.getItemValByCode(para2);

        LocalDate beginDate = LocalDate.parse(firstWorkingDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate endDate = LocalDate.parse(leaveDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        // 得到工龄
        int years = 0;
        // 得到年差
        years = endDate.getYear() - beginDate.getYear();
        // 若离职月数小于首次开始参加工作时间的月数，年差-1
        if (endDate.getMonthValue() < beginDate.getMonthValue()) {
            years = years - 1;
        } else if (endDate.getMonthValue() == beginDate.getMonthValue()) {
            // 当月数相等时，判断日数，若离职月的日数小于首次开始参加工作时间的日数，年差-1
            if (endDate.getDayOfMonth() < beginDate.getDayOfMonth()) {
                years = years - 1;
            }
        }
        func.setResult(BigDecimal.valueOf(years));
end

rule "工龄" // {工龄([入职日期],[离职日期])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        // 入职日期
        String onboardDate = (String)$context.getItemValByCode(para1);
        // 离职日期
        String leaveDate = (String)$context.getItemValByCode(para2);

        LocalDate beginDate = LocalDate.parse(onboardDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        LocalDate endDate = LocalDate.parse(leaveDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
         // 得到工龄
        int years = 0;
        // 得到年差
        years = endDate.getYear() - beginDate.getYear();
        // 若离职月数少于入职月数，年差-1
        if (endDate.getMonthValue() < beginDate.getMonthValue()) {
            years = years - 1;
        } else if (endDate.getMonthValue() == beginDate.getMonthValue()) {
            // 当月数相等时，判断日数，若离职月的日数小于入职月的日数，年差-1
            if (endDate.getDayOfMonth() < beginDate.getDayOfMonth()) {
                years = years - 1;
            }
        }
        func.setResult(BigDecimal.valueOf(years));

end

rule "劳务税" // {劳务税([劳务费])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("劳务税");
        String para1 = func.getParameters().get(0);
        BigDecimal laborCosts = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); //劳务费

        func.setResult(BigDecimal.valueOf(800.00)); // TODO
end

rule "病假扣除比例" // {病假扣除比例([城市],[工龄],[连续工龄],[病假天数],[当年度累计病假天数],[病假基数],[最低工资标准])}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("病假扣除比例");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String para3 = func.getParameters().get(2);
        String para4 = func.getParameters().get(3);
        String para5 = func.getParameters().get(4);
        String para6 = func.getParameters().get(5);
        String para7 = func.getParameters().get(6);

        String city = (String)$context.getItemValByCode(para1); // 城市
        BigDecimal workingAge = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 工龄
        BigDecimal continueAge = new BigDecimal(String.valueOf($context.getItemValByCode(para3))); // 连续工龄
        BigDecimal sickDays = new BigDecimal(String.valueOf($context.getItemValByCode(para4))); //病假天数
        BigDecimal AnnualSickDays = new BigDecimal(String.valueOf($context.getItemValByCode(para5))); //当年度累计病假天数
        BigDecimal sickBase = new BigDecimal(String.valueOf($context.getItemValByCode(para6))); //病假基数
        BigDecimal minStandard = new BigDecimal(String.valueOf($context.getItemValByCode(para7))); //最低工资标准

        if(("扬州".equals(city) || "上海".equals(city)) && (workingAge.compareTo(new BigDecimal(2)) < 0 )){
            func.setResult(BigDecimal.valueOf(0.4));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(2)) >= 0 && workingAge.compareTo(new BigDecimal(4)) < 0){
            func.setResult(BigDecimal.valueOf(0.3));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(4)) >= 0 && workingAge.compareTo(new BigDecimal(6)) < 0){
            func.setResult(BigDecimal.valueOf(0.2));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(6)) >= 0 && workingAge.compareTo(new BigDecimal(8)) < 0){
            func.setResult(BigDecimal.valueOf(0.1));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(8)) >= 0){
            func.setResult(BigDecimal.valueOf(0.0));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(10)) < 0){
            func.setResult(BigDecimal.valueOf(0.3));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(10)) >= 0 && continueAge.compareTo(new BigDecimal(20)) < 0){
            func.setResult(BigDecimal.valueOf(0.2));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(20)) >= 0 && continueAge.compareTo(new BigDecimal(30)) < 0){
            func.setResult(BigDecimal.valueOf(0.1));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(30)) >= 0){
             func.setResult(BigDecimal.valueOf(0.05));
        }else if("北京".equals(city) || "天津".equals(city) || "沈阳".equals(city) || "广州".equals(city) || "武汉".equals(city)){
             func.setResult(BigDecimal.valueOf(0.2));
        }else if(("北京".equals(city) || "天津".equals(city) || "沈阳".equals(city) || "广州".equals(city) || "武汉".equals(city))
                    && AnnualSickDays.compareTo(new BigDecimal(30)) <= 0 && (sickBase.divide(new BigDecimal(21.75)).multiply(sickDays).multiply(new BigDecimal(0.7)).compareTo(minStandard.divide(new BigDecimal(21.75)).multiply(sickDays).multiply(new BigDecimal(0.8)))) > 0){
              func.setResult(BigDecimal.valueOf(0.3));
        }else if("西安".equals(city) || "济南".equals(city)){
              func.setResult(BigDecimal.valueOf(0.3));
         }
        else{
            func.setResult(BigDecimal.valueOf(0.00));
        }
end

rule "长病假扣除比例" // {长病假扣除比例([城市],[工龄],[连续工龄]}
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("长病假扣除比例");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        String para3 = func.getParameters().get(2);

        String city = (String)$context.getItemValByCode(para1); // 城市
        BigDecimal workingAge = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 工龄
        BigDecimal continueAge = new BigDecimal(String.valueOf($context.getItemValByCode(para3))); // 连续工龄

        if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(1)) < 0){
            func.setResult(BigDecimal.valueOf(0.6));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(1)) >= 0 && workingAge.compareTo(new BigDecimal(3)) < 0){
            func.setResult(BigDecimal.valueOf(0.5));
        }else if(("扬州".equals(city) || "上海".equals(city)) && workingAge.compareTo(new BigDecimal(3)) >= 0){
            func.setResult(BigDecimal.valueOf(0.4));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(10)) < 0){
             func.setResult(BigDecimal.valueOf(0.4));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(10)) >= 0 && continueAge.compareTo(new BigDecimal(20)) < 0){
             func.setResult(BigDecimal.valueOf(0.35));
        }else if(("成都".equals(city)) && continueAge.compareTo(new BigDecimal(30)) >= 0){
              func.setResult(BigDecimal.valueOf(0.3));
        }else if("北京".equals(city) || "天津".equals(city) || "沈阳".equals(city) || "广州".equals(city) || "武汉".equals(city)){
              func.setResult(BigDecimal.valueOf(0.2));
        }else if("济南".equals(city)){
               func.setResult(BigDecimal.valueOf(0.4));
        }else if("西安".equals(city)){
               func.setResult(BigDecimal.valueOf(0.2));
        }
        else{
            func.setResult(BigDecimal.valueOf(0.00));
        }
end

/**
** 标准薪资组,薪资项17
** 调用实际工龄函数
*/
rule "工作年限_连续工龄" // {实际工龄([入职日期],[离职日期])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("工作年限_连续工龄");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        BigDecimal dateOnBoard = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 入职日期
        BigDecimal leaveDate = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 离职日期

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项18
** 调用工龄折算率函数
*/
rule "病假系数" // {工龄折算率([工作年限_连续工龄])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("病假系数");
        String para1 = func.getParameters().get(0);
        BigDecimal successiveService = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 工作年限_连续工龄

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项19
** 调用长工龄折算率函数
*/
rule "长病假系数" // {长病假工龄折算率([工作年限_连续工龄])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("长病假系数");
        String para1 = func.getParameters().get(0);
        BigDecimal successiveService = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 工作年限_连续工龄

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
 ** 标准薪资组,薪资项27
 ** 函数
*/
rule "免抵额" // {免抵额([国籍])}
              // 3500或者4800
    when
        $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("免抵额");
        String para1 = func.getParameters().get(0);
        String nation = (String)$context.getItemValByCode(para1);
        nation = nation.trim(); // 去除前后空格

        if(nation.equals("中华人民共和国")){
            func.setResult(BigDecimal.valueOf(3500.00));
        }else{
            func.setResult(BigDecimal.valueOf(4800.00));
        }
end

/**
** 标准薪资组,薪资项28
** 调用一般个人所得税的函数
*/
rule "补发扣税" // {一般个人所得税([补发工资]+[免抵额])}
                // 或者 0
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("补发扣税");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 补发工资
        BigDecimal par2 = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 免抵额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项32
** 调用薪金个税函数
*/
rule "薪金个税" // {一般个人所得税([应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("薪金个税");
        String para1 = func.getParameters().get(0);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项33
** 调用劳务个税函数
*/
rule "劳务个税" // {劳务税([劳务费]-[劳务费_允许扣除的税费])}
                // 或者 0
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("劳务个税");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 劳务费
        BigDecimal par2 = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 劳务费_允许扣除的税费

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项35
** 调用年终奖应纳税所得额函数、税率函数、速扣数函数
*/
rule "年终奖税" // ([年终奖应纳税所得额]*({税率([年终奖应纳税所得额]/12)})-{速扣数([年终奖应纳税所得额]/12)})
                // 或者 0
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("年终奖税");
        String para1 = func.getParameters().get(0);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 年终奖应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
 ** 标准薪资组,薪资项36
 ** 函数 待定
 */
rule "实际工作年限数" // 离职日期－入职日期 是0.5档 （离职日期为空，按工作日历）
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("实际工作年限数");
        String para1 = func.getParameters().get(0);
        String para2 = func.getParameters().get(1);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 入职日期
        BigDecimal par2 = new BigDecimal(String.valueOf($context.getItemValByCode(para2))); // 离职日期

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项38
** 调用税率函数
*/
rule "离职金税率" // {税率([离职金应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("离职金税率");
        String para1 = func.getParameters().get(0);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 离职金应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项39
** 调用速扣数函数
*/
rule "离职金扣除数" // {速扣数([离职金应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("离职金扣除数");
        String para1 = func.getParameters().get(0);
        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 离职金应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项49
** 调用本月日历天数函数
*/
rule "本月日历天数" // {该月实际天数()}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("本月日历天数");

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项50
** 调用该月工作天数函数
*/
rule "本月计薪天数" // {该月工作天数([入职日期],[离职日期])}
                    // 或者 {该月工作天数()}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("本月计薪天数");

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项52
** 调用税率函数
*/
rule "税率" // {税率([应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("税率");
        String para1 = func.getParameters().get(0);

        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end

/**
** 标准薪资组,薪资项53
** 调用速扣数函数
*/
rule "速扣数" // {速扣数([应纳税所得额])}
    when
       $context:DroolsContext()
    then
        FuncEntity func = $context.getFuncEntity("速扣数");
        String para1 = func.getParameters().get(0);

        BigDecimal par1 = new BigDecimal(String.valueOf($context.getItemValByCode(para1))); // 应纳税所得额

        func.setResult(BigDecimal.ZERO); // TODO
end