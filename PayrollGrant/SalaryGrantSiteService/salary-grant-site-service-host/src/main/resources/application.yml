info:
  app:
    name: 薪资发放-SITE
    version: 1.0.0
    description: 薪资发放站点
app:
  id: 10007005
endpoints:
  shutdown:
    #启用shutdown
    enabled: true
    #禁用密码验证
    sensitive: false
eureka:
  client:
    serviceUrl:
      defaultZone: ${eureka.serviceurl}
logging:
  level:
    com.ciicsh.gto.fcbusinesscenter.salarygrant.siteservice.dao: trace #mapper文件路径
  #file: /tmp/logs/salarygrant.log
management:
  context-path: /admin
  port: 7010
  #禁用安全验证
  security:
    enabled: false
#pagehelper:
#  reasonable: true
server:
  port: 7009
  session-timeout: "# session timeout in seconds"
  tomcat:
    background-processor-delay: 30
    basedir: /tmp
    max-threads: 0
    protocol-header: x-forwarded-proto
    remote-ip-header: x-forwarded-for
    uri-encoding: UTF-8
mybatis-plus:
  configuration:
    cache-enabled: false
    map-underscore-to-camel-case: true
  global-config:
  #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 1
    #驼峰下划线转换
    db-column-underline: true
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #刷新mapper 调试神器
    refresh-mapper: true
    #逻辑删除配置
    logic-delete-value: 0
    logic-not-delete-value: 1
    #自定义SQL注入器
    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  mapper-locations: mapper/*Mapper.xml
#  plugins:
#    - catMybatisInterceptor
druid:
#  configPathBasic:  ${druid.configPathBasic}
  configPathBusiness:  ${druid.configPathBusiness}
#  configPathPayroll:  ${druid.configPathPayroll}
#  configPathProduct:  ${druid.configPathProduct}
#  configPathSm:  ${druid.configPathSm}
#  configPathSupplier:  ${druid.configPathSupplier}
spring:
  application:
    name: fcbusiness-center-salarygrant-site-service
  profiles:
    active: dev
  http:
    encoding:
      force: true
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
    converters:
      preferred-json-mapper: jackson
  jackson:
    default-property-inclusion: non_null
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
  boot:
    admin:
      url: ${admin.url}
      client:
        prefer-ip: true
      api-path: instances
#    time-zone: GMT+8
#    date-format: yyyy-MM-dd HH:mm:ss
#  datasource:
#    url: jdbc:mysql://${database.host}:${database.port}/${database.databasename}?useUnicode=true&characterEncoding=utf8&useSSL=true&tinyInt1isBit=false
#    username: ${database.username}
#    password: ${database.password}
#    driver-class-name: com.mysql.jdbc.Driver
#  zipkin:
#    base-url: ${zipkin.base-url}  #ZipkinService地址
#    enabled: ${zipkin.enabled}
  sleuth:
    sampler:
      percentage: ${sleuth.percentage}
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${kafka.brokers}
          zk-nodes: ${kafka.zk-nodes}
          autoAddPartitions: true
#        configuration:
#          auto:
#            offset:
#              reset: latest
      bindings:
        sleuth:
          destination: sleuth-itdev # topic name
        sg_compute-close-output-channel:
          destination: fc_compute_close # 关帐
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        sg_compute-unclose-output-channel:
          destination: fc_compute_unclose # 取消关帐
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        pay-apply-pay-status-stream-input-channel:
          destination: pay-apply-pay-status-stream # 结算中心支付结果
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_payroll_main-channel:
          destination: common_taskservice_payroll_main # 本地
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_payroll_nonlocal-channel:
          destination: common_taskservice_payroll_nonlocal # 外地
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_payroll_local_domestic_currency-channel:
          destination: common_taskservice_payroll_local_domestic_currency # 本地人民币
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_payroll_local_foreign_currency-channel:
          destination: common_taskservice_payroll_local_foreign_currency # 本地外币
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_supplier_payment-channel:
          destination: common_taskservice_supplier_payment # 供应商
          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
        common_taskservice_process_complete:
          destination: common_taskservice_process_complete # 流程结束
#          content-type: application/json
          group: ${spring.application.name}
          consumer:
            partitioned: true
#        common_taskservice_task_complete:
#          destination: common_taskservice_task_complete # 任务完成
#          content-type: application/json
#          group: ${spring.application.name}
#          consumer:
#            partitioned: true
#        common-taskservice-process-complete:
#          destination: common_taskservice_process_complete
#          group: ${spring.application.name}
#          content-type: application/json
#          consumer:
#            partitioned: true
seaweed:
  masterHost: ${seaweed.masterHost}