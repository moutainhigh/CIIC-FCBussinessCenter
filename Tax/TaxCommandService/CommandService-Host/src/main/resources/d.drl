package com.ciicsh.gt1.fcbusinesscenter.tax.fcbusinesscenter_tax_commandservice_drools;
import java.math.BigDecimal
import java.util.ArrayList
import java.util.List
import java.util.stream.Stream
import java.util.Optional

declare CalculationContext
    taxAmount : BigDecimal//税金
    incomeForTax : BigDecimal//应纳税收入
    taxRate : BigDecimal//税率
    quickCalDeduct : BigDecimal//速算扣除数
end

rule "根据税金倒推应纳税所得额"
    when
        $context : CalculationContext()
    then
        List<CalculationContext> dlist = new ArrayList<>();

        CalculationContext cc = new CalculationContext();
        cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.03"));cc.setQuickCalDeduct(new BigDecimal("0"));
        cc.setIncomeForTax(cc.getTaxAmount().divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.1"));cc.setQuickCalDeduct(new BigDecimal("105"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.2"));cc.setQuickCalDeduct(new BigDecimal("555"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.25"));cc.setQuickCalDeduct(new BigDecimal("1005"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.3"));cc.setQuickCalDeduct(new BigDecimal("2755"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.35"));cc.setQuickCalDeduct(new BigDecimal("5505"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        cc = new CalculationContext();cc.setTaxAmount($context.getTaxAmount());cc.setTaxRate(new BigDecimal("0.45"));cc.setQuickCalDeduct(new BigDecimal("13505"));
        cc.setIncomeForTax(cc.getTaxAmount().add(cc.getQuickCalDeduct()).divide(cc.getTaxRate(),2, BigDecimal.ROUND_HALF_UP));dlist.add(cc);

        Optional<CalculationContext> o = dlist.stream().reduce((s1, s2) -> s1.getIncomeForTax().compareTo(s2.getIncomeForTax())==1 ? s2 : s1);
        CalculationContext min = o.get();

        $context.setIncomeForTax(min.getIncomeForTax());
        $context.setTaxRate(min.getTaxRate());
        $context.setQuickCalDeduct(min.getQuickCalDeduct());
end